package ar.edu.unju.fi.model.dao.impl;

import java.io.Serializable;
import java.lang.reflect.ParameterizedType;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.Session;

import ar.edu.unju.fi.model.hibernate.util.BaseHibernateSpring;
import ar.edu.unju.fi.modelo.dao.GenericDao;

public class GenericDaoImpl <Entity, K extends Serializable> extends BaseHibernateSpring implements GenericDao<Entity, K> {

	
	private Session session = getSession();
	public Class<Entity> domainClass = getDomainClass();
	
	
	protected Class getDomainClass() {
		   if (domainClass == null) {
		   ParameterizedType thisType = (ParameterizedType) getClass()
		     .getGenericSuperclass();
		   domainClass = (Class) thisType.getActualTypeArguments()[0];
		   }
		  return domainClass;
		 }
		  
	public K guardar(Entity t) {
		K clave;
		session.beginTransaction();
		clave = (K) session.save(t);
		session.getTransaction().commit();		
		return clave;
	}

	public void actualizar(Entity t){
		
		 	session.beginTransaction();
		 	session.update(t);
		 	session.getTransaction().commit();
		   } 
		  

	public Entity buscar(K id) {
		session.beginTransaction();
		Entity returnValue = (Entity) session.get(domainClass, id);
		session.getTransaction().commit();
	    return returnValue;
	}

	public void eliminar(Entity t) {
		session.beginTransaction();
	 	session.delete(t);
	 	session.getTransaction().commit();
		
	}

	public List<Entity> listar() {

		Criteria criteria = session.createCriteria(domainClass);
		return criteria.list();
	}


}
